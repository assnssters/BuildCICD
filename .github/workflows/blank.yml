name: Build PRoot for Android (Auto Clone)

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Workflow Repository
        uses: actions/checkout@v4

      - name: Install Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git build-essential autoconf libtool pkg-config automake bison flex python3 python3-pip # Thêm python3 và pip cho waf

      - name: Set up Android NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r27c

      - name: Define ABIs
        id: abis
        run: |
          echo "ABIS=(arm64-v8a armeabi-v7a x86 x86_64)" >> $GITHUB_ENV

      - name: Clone Samba (for Talloc) and PRoot Sources # <--- Thay đổi: Clone Samba
        run: |
          git clone --depth 1 https://git.samba.org/samba.git samba_src # Clone Samba (chỉ depth 1 để giảm kích thước)
          git clone https://github.com/proot-me/proot.git proot_src

      - name: Build Talloc and PRoot for each ABI
        run: |
          declare -a ABIS=(arm64-v8a armeabi-v7a x86 x86_64)

          export ANDROID_NDK_HOME=${ANDROID_NDK_ROOT}
          export ANDROID_PLATFORM=android-21
          
          mkdir -p build_output/libs

          for ABI in "${ABIS[@]}"; do
            echo "--- Building for ABI: $ABI ---"
            
            case "$ABI" in
              "arm64-v8a")
                TARGET_HOST="aarch64-linux-android"
                TOOLCHAIN_BIN_DIR="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin"
                ;;
              "armeabi-v7a")
                TARGET_HOST="arm-linux-androideabi"
                TOOLCHAIN_BIN_DIR="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin"
                ;;
              "x86")
                TARGET_HOST="i686-linux-android"
                TOOLCHAIN_BIN_DIR="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin"
                ;;
              "x86_64")
                TARGET_HOST="x86_64-linux-android"
                TOOLCHAIN_BIN_DIR="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin"
                ;;
              *)
                echo "Unknown ABI: $ABI"
                exit 1
                ;;
            esac

            export CC="${TOOLCHAIN_BIN_DIR}/${TARGET_HOST}${ANDROID_PLATFORM}-clang --target=${TARGET_HOST}${ANDROID_PLATFORM}"
            export CXX="${TOOLCHAIN_BIN_DIR}/${TARGET_HOST}${ANDROID_PLATFORM}-clang++ --target=${TARGET_HOST}${ANDROID_PLATFORM}"
            export AR="${TOOLCHAIN_BIN_DIR}/${TARGET_HOST}-ar"
            export LD="${TOOLCHAIN_BIN_DIR}/${TARGET_HOST}-ld"
            export AS="${TOOLCHAIN_BIN_DIR}/${TARGET_HOST}-as"
            export STRIP="${TOOLCHAIN_BIN_DIR}/${TARGET_HOST}-strip"
            export RANLIB="${TOOLCHAIN_BIN_DIR}/${TARGET_HOST}-ranlib"
            export CFLAGS="-fPIC -D_FILE_OFFSET_BITS=64"
            export LDFLAGS=""

            # --- 1. Build Talloc ---
            echo "Building Talloc for $ABI..."
            rm -rf talloc_build_$ABI
            mkdir -p talloc_build_$ABI
            pushd talloc_build_$ABI
            
            # Chạy configure của talloc từ thư mục gốc của samba_src
            # Sử dụng Python để chạy waf
            python3 ../samba_src/buildtools/bin/waf configure \
              --prefix=$(pwd)/install_dir \
              --out=$(pwd)/build_out \
              --disable-shared-libraries \
              --host=$TARGET_HOST \
              --cross-compile \
              --target-os=android \
              --android-ndk=${ANDROID_NDK_HOME} \
              --android-toolchain=${TARGET_HOST} \
              --android-api=${ANDROID_PLATFORM} \
              --enable-talloc \
              --disable-debug \
              --disable-rpath \
              --disable-rpath-hack \
              --bundled-libraries=NONE
            
            python3 ../samba_src/buildtools/bin/waf build -j$(nproc) talloc
            
            # Sau khi build, thư viện talloc sẽ nằm trong build_out/<target>/lib
            # Bạn cần tìm đúng đường dẫn của libtalloc.a hoặc libtalloc.so
            # Thông thường, nó sẽ là talloc_build_$ABI/build_out/default/lib/libtalloc.a
            # hoặc talloc_build_$ABI/build_out/android/<TARGET_HOST>/lib/libtalloc.a
            # Chúng ta cần file .a (static library) để link vào proot
            
            # Ví dụ: Giả sử thư viện nằm ở build_out/default/lib
            TALLOC_LIB_DIR=$(pwd)/build_out/default/lib # Điều chỉnh đường dẫn này nếu khác
            TALLOC_INCLUDE_DIR=$(pwd)/build_out/default/include # Điều chỉnh đường dẫn này nếu khác

            if [ ! -f "${TALLOC_LIB_DIR}/libtalloc.a" ]; then
                echo "Error: libtalloc.a not found at ${TALLOC_LIB_DIR}/libtalloc.a"
                ls -R $(pwd)/build_out/ # Giúp debug: liệt kê nội dung thư mục build_out
                exit 1
            fi
            
            popd
            
            # --- 2. Build PRoot ---
            echo "Building PRoot for $ABI..."
            rm -rf proot_build_$ABI
            mkdir -p proot_build_$ABI
            pushd proot_build_$ABI
            
            cp -r ../proot_src/* .

            PROOT_SRCS="proot.c mount.c trace.c syscall.c file.c rpath.c path.c util.c signal.c process.c"
            
            # Cờ liên kết cho PRoot
            # -I: Thêm đường dẫn include của talloc
            # -L: Thêm đường dẫn lib của talloc (từ TALLOC_LIB_DIR đã xác định ở trên)
            # -ltalloc: Liên kết với libtalloc
            ${CC} -o libproot.so -shared -fPIC \
              ${PROOT_SRCS} \
              -I${TALLOC_INCLUDE_DIR} \
              -L${TALLOC_LIB_DIR} \
              ${CFLAGS} ${LDFLAGS} \
              -ltalloc \
              -landroid -llog \
              -pthread # PRoot có thể cần pthread
            
            mkdir -p ../build_output/libs/$ABI
            cp libproot.so ../build_output/libs/$ABI/libproot.so
            
            popd

            echo "--- Finished building for ABI: $ABI ---"
          done

      - name: Zip Libraries
        run: |
          cd build_output/libs
          for ABI_DIR in *; do
            zip -r ../../libproot_${ABI_DIR}.zip $ABI_DIR
          done

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            libproot_arm64-v8a.zip
            libproot_armeabi-v7a.zip
            libproot_x86.zip
            libproot_x86_64.zip
          name: PRoot ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
